{"map":"{\"version\":3,\"sources\":[\"/Users/eugene/Documents/code/FrogRider.github.io/recipes_app/src/Recipe.js\",\"/Users/eugene/Documents/code/FrogRider.github.io/recipes_app/src/App.js\",\"/Users/eugene/Documents/code/FrogRider.github.io/recipes_app/src/serviceWorker.js\",\"/Users/eugene/Documents/code/FrogRider.github.io/recipes_app/src/index.js\"],\"names\":[\"recipe\",\"props\",\"react_default\",\"a\",\"createElement\",\"className\",\"label\",\"src\",\"image\",\"alt\",\"App\",\"exampleReq\",\"concat\",\"_useState\",\"useState\",\"_useState2\",\"Object\",\"slicedToArray\",\"recipes\",\"setRecipes\",\"getRecipes\",\"_ref\",\"asyncToGenerator\",\"regenerator_default\",\"mark\",\"_callee\",\"response\",\"data\",\"wrap\",\"_context\",\"prev\",\"next\",\"fetch\",\"sent\",\"json\",\"hits\",\"console\",\"log\",\"stop\",\"apply\",\"this\",\"arguments\",\"useEffect\",\"map\",\"Recipe\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"oNAaeA,EAXA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,QACZJ,EAAMK,MACPJ,EAAAC,EAAAC,cAAA,KAAA,MACAF,EAAAC,EAAAC,cAAA,MAAA,CAAKG,IAAKN,EAAMO,MAAOC,IAAI,KAC3BP,EAAAC,EAAAC,cAAA,KAAA,QCuBSM,SA3BH,WACV,IAEMC,EAAU,iDAAAC,OAFD,WAEC,aAAAA,OADA,oCAFAC,EAKcC,OAAAA,EAAAA,SAAAA,CAAS,IALvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAKTK,EALSH,EAAA,GAKAI,EALAJ,EAAA,GAOVK,EAAU,WAAA,IAAAC,EAAAL,OAAAM,EAAA,EAAAN,CAAAO,EAAApB,EAAAqB,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAApB,EAAAyB,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EACMC,MAAMrB,GADZ,KAAA,EAAA,OACXe,EADWG,EAAAI,KAAAJ,EAAAE,KAAA,EAEEL,EAASQ,OAFX,KAAA,EAEXP,EAFWE,EAAAI,KAGjBd,EAAWQ,EAAKQ,MAChBC,QAAQC,IAAIV,EAAKQ,MAJA,KAAA,EAAA,IAAA,MAAA,OAAAN,EAAAS,SAAAb,MAAH,OAAA,WAAA,OAAAJ,EAAAkB,MAAAC,KAAAC,YAAA,GAWhB,OAJAC,OAAAA,EAAAA,UAAAA,CAAU,WACRtB,KACC,IAGDlB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACZa,EAAQyB,IAAI,SAAA3C,GAAM,OACjBE,EAAAC,EAAAC,cAACwC,EAAD,CAAQtC,MAAON,EAAOA,OAAOM,MAAOE,MAAOR,EAAOA,OAAOQ,aCb7CqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from \\\"react\\\";\\n\\nconst recipe = props => {\\n  return (\\n    <div className=\\\"dish\\\">\\n      {props.label}\\n      <br />\\n      <img src={props.image} alt=\\\"\\\" />\\n      <hr />\\n    </div>\\n  );\\n};\\n\\nexport default recipe;\\n\",\"import React, { useEffect, useState } from \\\"react\\\";\\nimport Recipe from \\\"./Recipe\\\";\\nimport \\\"./App.css\\\";\\n\\nconst App = () => {\\n  const APP_ID = \\\"1eb5d637\\\";\\n  const APP_KEY = \\\"41f110548302c55cdabe03a9281347d9\\\";\\n  const exampleReq = `https://api.edamam.com/search?q=tomato&app_id=${APP_ID}&app_key=${APP_KEY}`;\\n\\n  const [recipes, setRecipes] = useState([]);\\n\\n  const getRecipes = async () => {\\n    const response = await fetch(exampleReq);\\n    const data = await response.json();\\n    setRecipes(data.hits);\\n    console.log(data.hits);\\n  };\\n\\n  useEffect(() => {\\n    getRecipes();\\n  }, []);\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      {recipes.map(recipe => (\\n        <Recipe label={recipe.recipe.label} image={recipe.recipe.image} />\\n      ))}\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{12:function(e,n,t){},14:function(e,n,t){},15:function(e,n,t){\"use strict\";t.r(n);var a=t(0),c=t.n(a),r=t(3),o=t.n(r),i=(t(12),t(1)),s=t.n(i),l=t(4),u=t(5),m=function(e){return c.a.createElement(\"div\",{className:\"dish\"},e.label,c.a.createElement(\"br\",null),c.a.createElement(\"img\",{src:e.image,alt:\"\"}),c.a.createElement(\"hr\",null))},p=(t(14),function(){var e=\"https://api.edamam.com/search?q=tomato&app_id=\".concat(\"1eb5d637\",\"&app_key=\").concat(\"41f110548302c55cdabe03a9281347d9\"),n=Object(a.useState)([]),t=Object(u.a)(n,2),r=t[0],o=t[1],i=function(){var n=Object(l.a)(s.a.mark(function n(){var t,a;return s.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,fetch(e);case 2:return t=n.sent,n.next=5,t.json();case 5:a=n.sent,o(a.hits),console.log(a.hits);case 8:case\"end\":return n.stop()}},n)}));return function(){return n.apply(this,arguments)}}();return Object(a.useEffect)(function(){i()},[]),c.a.createElement(\"div\",{className:\"App\"},r.map(function(e){return c.a.createElement(m,{label:e.recipe.label,image:e.recipe.image})}))});Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(c.a.createElement(p,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},6:function(e,n,t){e.exports=t(15)}},[[6,1,2]]]);","extractedComments":[]}